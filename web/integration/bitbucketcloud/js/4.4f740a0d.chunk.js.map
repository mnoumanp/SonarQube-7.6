{"version":3,"sources":["webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-path/src/path.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/constant.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/math.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/arc.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/linear.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/line.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/descending.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/identity.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/pie.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/radial.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/array.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/symbol/diamond.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/symbol/circle.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/symbol/star.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/noop.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/symbol/triangle.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/symbol/wye.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/basis.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/basisClosed.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/basisOpen.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/bundle.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/cardinal.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/cardinalClosed.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/cardinalOpen.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/catmullRom.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/catmullRomClosed.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/catmullRomOpen.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/linearClosed.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/monotone.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/natural.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/curve/step.js","webpack:////tmp/cirrus-ci-build/server/sonar-web/node_modules/d3-shape/src/index.js"],"names":["pi","Math","PI","tau","tauEpsilon","Path","this","_x0","_y0","_x1","_y1","_","path","prototype","constructor","moveTo","x","y","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","Error","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","rect","w","h","toString","src_path","constant","atan2","max","min","math_epsilon","math_pi","halfPi","math_tau","asin","arcInnerRadius","d","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","cornerTangents","r1","rc","lo","ox","oy","x11","y11","x10","y10","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","src_arc","cornerRadius","padRadius","context","buffer","r0","apply","arguments","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","p0","p1","oc","x3","y3","x32","y32","t","intersect","ax","ay","bx","by","kc","lc","centroid","a","length","Linear","_context","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","point","linear","descending","b","identity","src_pie","value","sortValues","sort","pie","data","i","j","k","v","n","sum","index","Array","arcs","p","pa","curveRadial","Radial","curve","_curve","radial","slice","kr","noop","that","Basis","BasisClosed","_x2","_x3","_x4","_y2","_y3","_y4","BasisOpen","Bundle","beta","_basis","_beta","_x","_y","push","custom","bundle","cardinal_point","_k","Cardinal","tension","cardinal","CardinalClosed","_x5","_y5","CardinalOpen","catmullRom_point","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","m","CatmullRom","alpha","_alpha","x23","y23","pow","catmullRom","CatmullRomClosed","CatmullRomOpen","LinearClosed","sign","slope3","h0","h1","s0","s1","slope2","monotone_point","MonotoneX","MonotoneY","ReflectContext","Natural","controlPoints","_t0","Object","create","call","px","py","i0","i1","Step","_t","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"js/4.4f740a0d.chunk.js","sourcesContent":["var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) {}\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export var abs = Math.abs;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var sin = Math.sin;\nexport var sqrt = Math.sqrt;\n\nexport var epsilon = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00);\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi) {\n          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n              ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport curveLinear from \"./curve/linear\";\nimport {x as pointX, y as pointY} from \"./point\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(d) {\n  return d;\n}\n","import constant from \"./constant\";\nimport descending from \"./descending\";\nimport identity from \"./identity\";\nimport {tau} from \"./math\";\n\nexport default function() {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    }\n\n    // Optionally sort the arcs by previously-computed values or by data.\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n    // Compute the arcs! They are stored in the original data's order.\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function(_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function(_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}\n","import curveLinear from \"./linear\";\n\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\n\nexport default function curveRadial(curve) {\n\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n\n  return radial;\n}\n","export var slice = Array.prototype.slice;\n","var tan30 = Math.sqrt(1 / 3),\n    tan30_2 = tan30 * 2;\n\nexport default {\n  draw: function(context, size) {\n    var y = Math.sqrt(size / tan30_2),\n        x = y * tan30;\n    context.moveTo(0, -y);\n    context.lineTo(x, 0);\n    context.lineTo(0, y);\n    context.lineTo(-x, 0);\n    context.closePath();\n  }\n};\n","import {pi, tau} from \"../math\";\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","import {pi, tau} from \"../math\";\n\nvar ka = 0.89081309152928522810,\n    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),\n    kx = Math.sin(tau / 10) * kr,\n    ky = -Math.cos(tau / 10) * kr;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size * ka),\n        x = kx * r,\n        y = ky * r;\n    context.moveTo(0, -r);\n    context.lineTo(x, y);\n    for (var i = 1; i < 5; ++i) {\n      var a = tau * i / 5,\n          c = Math.cos(a),\n          s = Math.sin(a);\n      context.lineTo(s * r, -c * r);\n      context.lineTo(c * x - s * y, s * x + c * y);\n    }\n    context.closePath();\n  }\n};\n","export default function() {}\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n  draw: function(context, size) {\n    var y = -Math.sqrt(size / (sqrt3 * 3));\n    context.moveTo(0, y * 2);\n    context.lineTo(-sqrt3 * y, -y);\n    context.lineTo(sqrt3 * y, -y);\n    context.closePath();\n  }\n};\n","var c = -0.5,\n    s = Math.sqrt(3) / 2,\n    k = 1 / Math.sqrt(12),\n    a = (k / 2 + 1) * 3;\n\nexport default {\n  draw: function(context, size) {\n    var r = Math.sqrt(size / a),\n        x0 = r / 2,\n        y0 = r * k,\n        x1 = x0,\n        y1 = r * k + r,\n        x2 = -x1,\n        y2 = y1;\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n    context.closePath();\n  }\n};\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    (2 * that._x0 + that._x1) / 3,\n    (2 * that._y0 + that._y1) / 3,\n    (that._x0 + 2 * that._x1) / 3,\n    (that._y0 + 2 * that._y1) / 3,\n    (that._x0 + 4 * that._x1 + x) / 6,\n    (that._y0 + 4 * that._y1 + y) / 6\n  );\n}\n\nexport function Basis(context) {\n  this._context = context;\n}\n\nBasis.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 3: point(this, this._x1, this._y1); // proceed\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new Basis(context);\n}\n","import noop from \"../noop\";\nimport {point} from \"./basis\";\n\nfunction BasisClosed(context) {\n  this._context = context;\n}\n\nBasisClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x2, this._y2);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x2, this._y2);\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisClosed(context);\n}\n","import {point} from \"./basis\";\n\nfunction BasisOpen(context) {\n  this._context = context;\n}\n\nBasisOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisOpen(context);\n}\n","import {Basis} from \"./basis\";\n\nfunction Bundle(context, beta) {\n  this._basis = new Basis(context);\n  this._beta = beta;\n}\n\nBundle.prototype = {\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n    this._basis.lineStart();\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        j = x.length - 1;\n\n    if (j > 0) {\n      var x0 = x[0],\n          y0 = y[0],\n          dx = x[j] - x0,\n          dy = y[j] - y0,\n          i = -1,\n          t;\n\n      while (++i <= j) {\n        t = i / j;\n        this._basis.point(\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n        );\n      }\n    }\n\n    this._x = this._y = null;\n    this._basis.lineEnd();\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\nexport default (function custom(beta) {\n\n  function bundle(context) {\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n  }\n\n  bundle.beta = function(beta) {\n    return custom(+beta);\n  };\n\n  return bundle;\n})(0.85);\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import noop from \"../noop\";\nimport {point} from \"./cardinal\";\n\nexport function CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {point} from \"./cardinal\";\n\nexport function CardinalOpen(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalOpen(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {epsilon} from \"../math\";\nimport {Cardinal} from \"./cardinal\";\n\nexport function point(that, x, y) {\n  var x1 = that._x1,\n      y1 = that._y1,\n      x2 = that._x2,\n      y2 = that._y2;\n\n  if (that._l01_a > epsilon) {\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n  }\n\n  if (that._l23_a > epsilon) {\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n  }\n\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n}\n\nfunction CatmullRom(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRom.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: this.point(this._x2, this._y2); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalClosed} from \"./cardinalClosed\";\nimport noop from \"../noop\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomClosed(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalOpen} from \"./cardinalOpen\";\nimport {point} from \"./catmullRom\";\n\nfunction CatmullRomOpen(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // proceed\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import noop from \"../noop\";\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._point) this._context.closePath();\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);\n    else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nexport default function(context) {\n  return new LinearClosed(context);\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","export {default as arc} from \"./arc\";\nexport {default as area} from \"./area\";\nexport {default as line} from \"./line\";\nexport {default as pie} from \"./pie\";\nexport {default as areaRadial, default as radialArea} from \"./areaRadial\"; // Note: radialArea is deprecated!\nexport {default as lineRadial, default as radialLine} from \"./lineRadial\"; // Note: radialLine is deprecated!\nexport {default as pointRadial} from \"./pointRadial\";\nexport {linkHorizontal, linkVertical, linkRadial} from \"./link/index\";\n\nexport {default as symbol, symbols} from \"./symbol\";\nexport {default as symbolCircle} from \"./symbol/circle\";\nexport {default as symbolCross} from \"./symbol/cross\";\nexport {default as symbolDiamond} from \"./symbol/diamond\";\nexport {default as symbolSquare} from \"./symbol/square\";\nexport {default as symbolStar} from \"./symbol/star\";\nexport {default as symbolTriangle} from \"./symbol/triangle\";\nexport {default as symbolWye} from \"./symbol/wye\";\n\nexport {default as curveBasisClosed} from \"./curve/basisClosed\";\nexport {default as curveBasisOpen} from \"./curve/basisOpen\";\nexport {default as curveBasis} from \"./curve/basis\";\nexport {default as curveBundle} from \"./curve/bundle\";\nexport {default as curveCardinalClosed} from \"./curve/cardinalClosed\";\nexport {default as curveCardinalOpen} from \"./curve/cardinalOpen\";\nexport {default as curveCardinal} from \"./curve/cardinal\";\nexport {default as curveCatmullRomClosed} from \"./curve/catmullRomClosed\";\nexport {default as curveCatmullRomOpen} from \"./curve/catmullRomOpen\";\nexport {default as curveCatmullRom} from \"./curve/catmullRom\";\nexport {default as curveLinearClosed} from \"./curve/linearClosed\";\nexport {default as curveLinear} from \"./curve/linear\";\nexport {monotoneX as curveMonotoneX, monotoneY as curveMonotoneY} from \"./curve/monotone\";\nexport {default as curveNatural} from \"./curve/natural\";\nexport {default as curveStep, stepAfter as curveStepAfter, stepBefore as curveStepBefore} from \"./curve/step\";\n\nexport {default as stack} from \"./stack\";\nexport {default as stackOffsetExpand} from \"./offset/expand\";\nexport {default as stackOffsetDiverging} from \"./offset/diverging\";\nexport {default as stackOffsetNone} from \"./offset/none\";\nexport {default as stackOffsetSilhouette} from \"./offset/silhouette\";\nexport {default as stackOffsetWiggle} from \"./offset/wiggle\";\nexport {default as stackOrderAscending} from \"./order/ascending\";\nexport {default as stackOrderDescending} from \"./order/descending\";\nexport {default as stackOrderInsideOut} from \"./order/insideOut\";\nexport {default as stackOrderNone} from \"./order/none\";\nexport {default as stackOrderReverse} from \"./order/reverse\";\n"],"sourceRoot":""}